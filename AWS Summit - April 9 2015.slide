Using Metrics to Measure and Understand Your AWS Environment Performance
AWS Global Summit 2015
9 Apr 2015
Tags: go golang aws

Matt Williams
Evangelist, Datadog
matt.williams@datadoghq.com
http://datadoghq.com
@technovangelist


* Before I Get Started...
- getting started is easy

* Before I Get Started...
- getting started is easy
- getting good is not easy

* Before I Get Started...
- getting started is easy
- getting good is not easy
- and it will not be quick

* Why measure?
- See where you came from

* Why measure?
- See where you came from
- See how you are doing

* Why measure?
- See where you came from
- See how you are doing
- See how you can improve

* Why is this complicated?
- Elasticity makes this complicated
- Elasticity is the new normal

* Scenarios that require elasticity
- Amateur Sports
- Shopping Events
- Concerts
- Marketing Campaigns
- What is your scenario?

* How to solve the complexity
- Tags are one solution and what Datadog uses
.image assets/tags.png


* How tags makes this easier
.iframe https://app.datadoghq.com/infrastructure/map 575 1200


* Tags allow for ad-hoc aggregation
Monitor all Docker containers running image web

… in region us-west-2 across all availability zones

… and make sure resident set size <  1GB on c3.xl

* Tags allow for ad-hoc aggregation
Monitor all Docker containers running _image_ *web*

… in region *us-west-2* across all *availability* *zones*

… and make sure [ resident set size  <  1GB ] on *c3.xl*

* Tags allow for ad-hoc aggregation
Monitor all Docker containers running _image_ *web*

… in region *us-west-2* across all *availability* *zones*

… and make sure [ RSS > 1.5x AVG ] on *c3.xl*


* What about context?
.iframe https://app.datadoghq.com/dash/1079/postgres?page=0&from_ts=1426963202917&to_ts=1427136002917&tile_size=xs&abstraction_level=1&per_page=30&use_date_happened=true#title_dash_1079 575 1200

* What metrics to look at?
- There isn’t a single source of expertise
- This is the hard part


* There is a lot of guidance

.html assets/there-is-guidance.html

* You need to find / hire /train an expert
- Your context changes the meaning of metrics


* 3 categories of metrics
- Utilization - percent/time
- Saturation - wait queue length
- Errors - error count


* What is good vs bad?
First learn the patterns

.image assets/patterns.png


* Spiky
.image assets/spiky.png

* Steady
.image assets/steady.png

* Counter
.image assets/counter.png

* Bursty
.image assets/bursty.png

* Binary
.image assets/binary.png


* Classic Sawtooth
.image assets/sawtooth.png

* Cyclic
.image assets/cyclic.png

* Stairy
.image assets/stairy.png

* Are the anomalies the focus…
.image assets/anomalies.png 0 1200

* Are the anomalies the focus, or should they be ignored
.image assets/anomalies.png 0 1200

* Figure out your cycles
.image assets/figure-out-cycles-desk.png

* A Month of Cloudtrail
.image assets/month-of-cloudtrail.png

* Get the scales right
.image assets/time-scale-latencies.png 600 800

* Combine time scales to find patterns

.image assets/docker-3-scales.png

* Different Intervals
.image assets/day-week-month.png 0 650

* Combine scales to find patterns
.image assets/time-overlays.png

* Specific metrics to consider with AWS
It's impossible to say what the best metrics are in all cases.

It depends on YOUR workload

* AWS EC2
- system.cpu.stolen
- system.cpu.idle
- system.load.norm.5 *
- system.mem.pct_usable *
- system.disk.pct_usable *
- aws.ec2.network_in/out
- aws.ec2.disk_read/write_ops

* AWS EC2
.iframe https://app.datadoghq.com/dash/45096/stolen-demo-board?live=true&from_ts=1427368874242&to_ts=1427973674242&tile_size=xl&tpl_var_instance_size=r3.large#title_dash_45096 550 1200

.caption (https://www.datadoghq.com/2013/08/understanding-aws-stolen-cpu-and-how-it-affects-your-apps/)

* AWS EBS Provisioned IOPS
- aws.ebs.volume_queue_length (should never go over 1/100)
.image assets/ebs_volume_queue_length.png 0 800
.image assets/ebs_vql_cpu.png 0 800

.caption (https://www.datadoghq.com/2013/07/aws-ebs-provisioned-iops-getting-optimal-performance/)

* AWS Elastic Load Balancer
- healthy_host_count, latency
- HTTPCode_ELB_5XX
- surge_queue_length
- spill_over_count
- backent_connection_errors

.caption (https://www.datadoghq.com/2013/11/key-aws-elb-monitoring-metrics/)

* Specific SQS Metrics

- number_of_messages_sent (NOM_sent), NOM_received
- NOM_deleted (throughput)
- sent_message_size (cost)
- approximate_NOM_visible (backlog)
- approximate_NOM_not_visible (worked on)

.caption (https://www.datadoghq.com/2014/08/monitor-amazon-sqs-message-traffic-datadog/)


* How to get started
.iframe http://www.datadoghq.com/ 575 1200

* Questions


